{"ast":null,"code":"// serviceWorkerRegistration.js\n\n// This optional code is used to register a service worker.\n// Learn more about service workers: https://cra.link/PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.\\d+){0,2}\\.\\d+$/));\nexport function register(config) {\n  if ('serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n      } else {\n        // Is not localhost. Just register the service worker.\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched.\n            console.log('New content is available; please refresh.');\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            console.log('Content is cached for offline use.');\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","publicUrl","URL","process","env","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","registerValidSW","serviceWorker","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","message"],"sources":["C:/Users/ANISH/Downloads/SIH_FRONTEND/Frontend/src/serviceWorkerRegistration.js"],"sourcesContent":["// serviceWorkerRegistration.js\r\n\r\n// This optional code is used to register a service worker.\r\n// Learn more about service workers: https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.\\d+){0,2}\\.\\d+$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if ('serviceWorker' in navigator) {\r\n      const publicUrl = new URL(\r\n        process.env.PUBLIC_URL,\r\n        window.location.href\r\n      );\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n        } else {\r\n          // Is not localhost. Just register the service worker.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched.\r\n                console.log(\r\n                  'New content is available; please refresh.'\r\n                );\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                console.log('Content is cached for offline use.');\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}